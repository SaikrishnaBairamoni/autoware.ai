stages:
  - build
  - deploy
  
variables:
  VCS_FILE: build_depends.repos
  AUTOWARE_CROSS_TARGET_PLATFORM: generic-aarch64
    - sudo apt-get install -y python3-pip python3-setuptools python3-colcon-common-extensions python3-vcstool
    # Update setuptools from PyPI because the version Ubuntu ships with is too old
    - pip3 install -U setuptools
    - vcs validate < $VCS_FILE
    - sudo apt-get update
    - sudo apt-get install -y libarmadillo-dev libglew-dev libssh2-1-dev python-flask python-requests wget lcov
    - sudo apt-get install -y python3-pip python3-setuptools python3-colcon-common-extensions python3-vcstool
    # which is not the standard target for CMake projects. We need to trigger the tests target so that
    # tests are built and any fixtures are set up.
    - colcon build --cmake-target tests --cmake-args -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage" -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage" -DCMAKE_BUILD_TYPE=Debug
    - lcov --initial --directory build --capture --output-file lcov.base
    - colcon test
    - colcon test-result
  script:
    # We first build the entire workspace normally
    - source /opt/ros/${ROS_DISTRO}/setup.bash
    - master

build_melodic:
  stage: build
  image: autoware/autoware:bleedingedge-melodic-base
  <<: *build_common

build_melodic_cuda:
  stage: build
  image: autoware/autoware:bleedingedge-melodic-base-cuda
  <<: *build_cuda

build_melodic_cross:
  stage: build
  image: autoware/build:${AUTOWARE_CROSS_TARGET_PLATFORM}-melodic-bleedingedge
  variables:
    ROS_DISTRO: melodic
    <<: *build_cross_vars
  <<: *build_cross_common

pages:
  coverage: /\s*lines.*:\s(\d+\.\d+\%\s\(\d+\sof\s\d+.*\))/
  only:
    - merge_requests
    - master

.build_cuda: &build_cuda
  before_script:
    - mkdir -p src_tmp/$CI_PROJECT_NAME && mv `find -maxdepth 1 -not -name . -not -name src_tmp -not -name $VCS_FILE` src_tmp/$CI_PROJECT_NAME && mv src_tmp/ src/
    - sudo apt-get update
    - sudo apt-get install -y libarmadillo-dev libglew-dev libssh2-1-dev python-flask python-requests wget
    - sudo apt-get install -y python3-pip python3-setuptools python3-colcon-common-extensions python3-vcstool
    # Update setuptools from PyPI because the version Ubuntu ships with is too old
    - pip3 install -U setuptools
    - vcs validate < $VCS_FILE
    - vcs import src/ < $VCS_FILE
    - rosdep update
    - rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO
  script:
    # We first build the entire workspace normally
    - source /opt/ros/${ROS_DISTRO}/setup.bash
    - colcon build --cmake-args -DCMAKE_BUILD_TYPE=Debug
    # And then build the tests target. catkin (ROS1) packages add their tests to the tests target
    # which is not the standard target for CMake projects. We need to trigger the tests target so that
    # tests are built and any fixtures are set up.
    - colcon build --cmake-target tests --cmake-args -DCMAKE_BUILD_TYPE=Debug
    - colcon test
    - colcon test-result
  only:
    - merge_requests
    - master

.build_cross_vars: &build_cross_vars
    AUTOWARE_TARGET_ARCH: aarch64
    AUTOWARE_TOOLCHAIN_FILE_PATH: $CI_PROJECT_DIR/cross_toolchain.cmake
    AUTOWARE_SYSROOT: /sysroot/${AUTOWARE_CROSS_TARGET_PLATFORM}

.build_cross: &build_cross_common
  script:
    - mkdir -p src_tmp/$CI_PROJECT_NAME && mv `find -maxdepth 1 -not -name . -not -name src_tmp -not -name $VCS_FILE` src_tmp/$CI_PROJECT_NAME && mv src_tmp/ src/
    - apt update -qq && apt install -y python3-vcstool git wget
    - wget https://gitlab.com/autowarefoundation/autoware.ai/autoware/raw/master/ros/cross_toolchain.cmake
    - source ${AUTOWARE_SYSROOT}/opt/ros/${ROS_DISTRO}/setup.bash
    - vcs validate < $VCS_FILE
    - vcs import src/ < $VCS_FILE
    - colcon build
        --merge-install
        --cmake-args
        -DCMAKE_TOOLCHAIN_FILE=${AUTOWARE_TOOLCHAIN_FILE_PATH}
        -DCMAKE_SYSTEM_PROCESSOR=${AUTOWARE_TARGET_ARCH}
        -DCMAKE_PREFIX_PATH="${CI_PROJECT_DIR}/install;${AUTOWARE_SYSROOT}/opt/ros/${ROS_DISTRO}"
        -DCMAKE_FIND_ROOT_PATH=${CI_PROJECT_DIR}/install
  only:
    - merge_requests
    - master

build_melodic:
  stage: build
  image: autoware/autoware:bleedingedge-melodic-base
  <<: *build_common

build_melodic_cuda:
  stage: build
  image: autoware/autoware:bleedingedge-melodic-base-cuda
  <<: *build_cuda

build_melodic_cross:
  stage: build
  image: autoware/build:${AUTOWARE_CROSS_TARGET_PLATFORM}-melodic-bleedingedge
  variables:
    ROS_DISTRO: melodic
